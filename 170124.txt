
Notes on Model (service) -  View -  Controller


What is job of the serivce (model)?  var dcCharacters = getCharacters(arr,uni1)
==================================
	The reason this is called both 'service' and 'model' is becasue you have functions (service) and data (model)
	This is the part where you manupulate the data that you are modeling. 
	This part is relatively static.
	Deals with the the complexity of the object.
	Your data goes into the service.

	This file begins with a constructor function.
		Ex: function Model()

	Inside this overall function are 1.) your data and 2.) geter and setter functions.
	Note: If it manupulates the dataObject it beclongs in the service.
	Remember static data requres a var.

	Example syntax for getter and setter functions.
		this.functionName = function()
			{code here}.

	Key point: if it is not on the this. is will not be accessible to the next layer. 

	When passing arrays you can make a COPY and send that COPY out to the contorller.
		You do with with splice.

	REMEMBER: before you can us this data it must be instatntiated in the controller.  
	Example of the first line of the controller is: var studentService = new StudentService()




What is job of controller?
==========================
	Does not manage object.
	Fetches content for the view.
	The controler changes all of the time with diffrent frameworks.
	The contorller helps us interact with the dom.
	Is lightwight
	Is in the middle.
	Anything document. {something} belongs in the controler.
	If it manupulates the page it belogs in the contorller.
	
	The first thing you put in the controller is a constructor.
		Ex: function Control()

	The first thing in the consctrctor is an instatntation of the service.
		Ex: var model = new Model() <-- this must match the first lines of your service file. 

	If it is not on the .this keyword it will not be avaiable for anything else.

	The very bottom line of the controller should be the triger to initally load the page. 
		Ex: this.handel.Reset()
	Service and View never talk to each other.  They should not be open in your editor at the same time.
	if something is on .this on the controller it better be something that the user is going to touch.
	HTML written to the page is done in the controller.



Refactoring taking code that is working and making it more scaleable.

Load Order in HTML file.
1. Services/Model
2. Controllers (this loads second because controllers require serivces to be loaded first).
3. Run the app.

Goal is to change as little code a possible to change things.
Save and test often.
If devtool are open, you can hold click on reload and call it as "empty cash and reload."
You cannot be afraid to brake you code.
If your intellisense isn't helping you you are probably writing your code wrong.

See this cheetsheet as well : https://bcw-cheatsheets.herokuapp.com/cheatsheets/18
You want to use encapsulation to shape the data avaiable to the user.


The app.js
==========
This is how you initaize the project.
You do this by instationing a controler object.
	ex: control = new Control();

In the HTML
===========
  

 User Story
 ==========
Codefoo 2446

Template Strings
================
The gole withe the template string is to write out HTML which will be injected onto the page.

Example:
	var template = `<ul>`;
	for (var char of dcChars)
	{
	template += `<li>${char.name}</li>`
	}

See codefoo 2446


placehold.it/200x200 --> will return a placeholder of size 200x200.


